/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: systemmanager/servicediscovery.proto */

#ifndef PROTOBUF_C_systemmanager_2fservicediscovery_2eproto__INCLUDED
#define PROTOBUF_C_systemmanager_2fservicediscovery_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ProtobufMsgs__ServiceIdentifier ProtobufMsgs__ServiceIdentifier;
typedef struct _ProtobufMsgs__ServiceEndpoint ProtobufMsgs__ServiceEndpoint;
typedef struct _ProtobufMsgs__Service ProtobufMsgs__Service;
typedef struct _ProtobufMsgs__ServiceInformationRequest ProtobufMsgs__ServiceInformationRequest;
typedef struct _ProtobufMsgs__ServiceStatus ProtobufMsgs__ServiceStatus;
typedef struct _ProtobufMsgs__ServiceOrder ProtobufMsgs__ServiceOrder;


/* --- enums --- */

typedef enum _ProtobufMsgs__ServiceStatus__Status {
  PROTOBUF_MSGS__SERVICE_STATUS__STATUS__UNKNOWN = 0,
  PROTOBUF_MSGS__SERVICE_STATUS__STATUS__RUNNING = 1,
  PROTOBUF_MSGS__SERVICE_STATUS__STATUS__STOPPED = 2,
  PROTOBUF_MSGS__SERVICE_STATUS__STATUS__NOT_REGISTERED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOBUF_MSGS__SERVICE_STATUS__STATUS)
} ProtobufMsgs__ServiceStatus__Status;
typedef enum _ProtobufMsgs__ServiceOrder__OrderType {
  /*
   * will attempt a graceful shutdown
   */
  PROTOBUF_MSGS__SERVICE_ORDER__ORDER_TYPE__STOP = 0,
  /*
   * will kill the service immediately
   */
  PROTOBUF_MSGS__SERVICE_ORDER__ORDER_TYPE__KILL = 1,
  /*
   * will kill the service immediately and restart
   */
  PROTOBUF_MSGS__SERVICE_ORDER__ORDER_TYPE__FORCE_RESTART = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PROTOBUF_MSGS__SERVICE_ORDER__ORDER_TYPE)
} ProtobufMsgs__ServiceOrder__OrderType;

/* --- messages --- */

/*
 * Used to identify a service within the system
 */
struct  _ProtobufMsgs__ServiceIdentifier
{
  ProtobufCMessage base;
  char *name;
  int32_t pid;
};
#define PROTOBUF_MSGS__SERVICE_IDENTIFIER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__service_identifier__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


/*
 * An endpoint that is made available by a service
 */
struct  _ProtobufMsgs__ServiceEndpoint
{
  ProtobufCMessage base;
  /*
   * the identifier to select this endpoint
   */
  char *name;
  /*
   * the zmq address to connect to
   */
  char *address;
};
#define PROTOBUF_MSGS__SERVICE_ENDPOINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__service_endpoint__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * A description of a service, sent by a service to register itself or broadcasted by the system manager
 */
struct  _ProtobufMsgs__Service
{
  ProtobufCMessage base;
  ProtobufMsgs__ServiceIdentifier *identifier;
  size_t n_endpoints;
  ProtobufMsgs__ServiceEndpoint **endpoints;
};
#define PROTOBUF_MSGS__SERVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__service__descriptor) \
    , NULL, 0,NULL }


/*
 * When a service requests information about other services, it sends an InformationRequest message
 */
struct  _ProtobufMsgs__ServiceInformationRequest
{
  ProtobufCMessage base;
  ProtobufMsgs__ServiceIdentifier *requested;
};
#define PROTOBUF_MSGS__SERVICE_INFORMATION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__service_information_request__descriptor) \
    , NULL }


/*
 * When the system manager sends information about a service, it sends an Information message
 * Also used to broadcast registrations to all services
 */
struct  _ProtobufMsgs__ServiceStatus
{
  ProtobufCMessage base;
  ProtobufMsgs__Service *service;
  ProtobufMsgs__ServiceStatus__Status status;
};
#define PROTOBUF_MSGS__SERVICE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__service_status__descriptor) \
    , NULL, PROTOBUF_MSGS__SERVICE_STATUS__STATUS__UNKNOWN }


/*
 * The system manager can order services to stop/restart by sending a service order
 */
struct  _ProtobufMsgs__ServiceOrder
{
  ProtobufCMessage base;
  /*
   * The service this order is for
   */
  ProtobufMsgs__ServiceIdentifier *service;
  ProtobufMsgs__ServiceOrder__OrderType order;
};
#define PROTOBUF_MSGS__SERVICE_ORDER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&protobuf_msgs__service_order__descriptor) \
    , NULL, PROTOBUF_MSGS__SERVICE_ORDER__ORDER_TYPE__STOP }


/* ProtobufMsgs__ServiceIdentifier methods */
void   protobuf_msgs__service_identifier__init
                     (ProtobufMsgs__ServiceIdentifier         *message);
size_t protobuf_msgs__service_identifier__get_packed_size
                     (const ProtobufMsgs__ServiceIdentifier   *message);
size_t protobuf_msgs__service_identifier__pack
                     (const ProtobufMsgs__ServiceIdentifier   *message,
                      uint8_t             *out);
size_t protobuf_msgs__service_identifier__pack_to_buffer
                     (const ProtobufMsgs__ServiceIdentifier   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__ServiceIdentifier *
       protobuf_msgs__service_identifier__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__service_identifier__free_unpacked
                     (ProtobufMsgs__ServiceIdentifier *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__ServiceEndpoint methods */
void   protobuf_msgs__service_endpoint__init
                     (ProtobufMsgs__ServiceEndpoint         *message);
size_t protobuf_msgs__service_endpoint__get_packed_size
                     (const ProtobufMsgs__ServiceEndpoint   *message);
size_t protobuf_msgs__service_endpoint__pack
                     (const ProtobufMsgs__ServiceEndpoint   *message,
                      uint8_t             *out);
size_t protobuf_msgs__service_endpoint__pack_to_buffer
                     (const ProtobufMsgs__ServiceEndpoint   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__ServiceEndpoint *
       protobuf_msgs__service_endpoint__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__service_endpoint__free_unpacked
                     (ProtobufMsgs__ServiceEndpoint *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__Service methods */
void   protobuf_msgs__service__init
                     (ProtobufMsgs__Service         *message);
size_t protobuf_msgs__service__get_packed_size
                     (const ProtobufMsgs__Service   *message);
size_t protobuf_msgs__service__pack
                     (const ProtobufMsgs__Service   *message,
                      uint8_t             *out);
size_t protobuf_msgs__service__pack_to_buffer
                     (const ProtobufMsgs__Service   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__Service *
       protobuf_msgs__service__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__service__free_unpacked
                     (ProtobufMsgs__Service *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__ServiceInformationRequest methods */
void   protobuf_msgs__service_information_request__init
                     (ProtobufMsgs__ServiceInformationRequest         *message);
size_t protobuf_msgs__service_information_request__get_packed_size
                     (const ProtobufMsgs__ServiceInformationRequest   *message);
size_t protobuf_msgs__service_information_request__pack
                     (const ProtobufMsgs__ServiceInformationRequest   *message,
                      uint8_t             *out);
size_t protobuf_msgs__service_information_request__pack_to_buffer
                     (const ProtobufMsgs__ServiceInformationRequest   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__ServiceInformationRequest *
       protobuf_msgs__service_information_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__service_information_request__free_unpacked
                     (ProtobufMsgs__ServiceInformationRequest *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__ServiceStatus methods */
void   protobuf_msgs__service_status__init
                     (ProtobufMsgs__ServiceStatus         *message);
size_t protobuf_msgs__service_status__get_packed_size
                     (const ProtobufMsgs__ServiceStatus   *message);
size_t protobuf_msgs__service_status__pack
                     (const ProtobufMsgs__ServiceStatus   *message,
                      uint8_t             *out);
size_t protobuf_msgs__service_status__pack_to_buffer
                     (const ProtobufMsgs__ServiceStatus   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__ServiceStatus *
       protobuf_msgs__service_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__service_status__free_unpacked
                     (ProtobufMsgs__ServiceStatus *message,
                      ProtobufCAllocator *allocator);
/* ProtobufMsgs__ServiceOrder methods */
void   protobuf_msgs__service_order__init
                     (ProtobufMsgs__ServiceOrder         *message);
size_t protobuf_msgs__service_order__get_packed_size
                     (const ProtobufMsgs__ServiceOrder   *message);
size_t protobuf_msgs__service_order__pack
                     (const ProtobufMsgs__ServiceOrder   *message,
                      uint8_t             *out);
size_t protobuf_msgs__service_order__pack_to_buffer
                     (const ProtobufMsgs__ServiceOrder   *message,
                      ProtobufCBuffer     *buffer);
ProtobufMsgs__ServiceOrder *
       protobuf_msgs__service_order__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   protobuf_msgs__service_order__free_unpacked
                     (ProtobufMsgs__ServiceOrder *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ProtobufMsgs__ServiceIdentifier_Closure)
                 (const ProtobufMsgs__ServiceIdentifier *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__ServiceEndpoint_Closure)
                 (const ProtobufMsgs__ServiceEndpoint *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__Service_Closure)
                 (const ProtobufMsgs__Service *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__ServiceInformationRequest_Closure)
                 (const ProtobufMsgs__ServiceInformationRequest *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__ServiceStatus_Closure)
                 (const ProtobufMsgs__ServiceStatus *message,
                  void *closure_data);
typedef void (*ProtobufMsgs__ServiceOrder_Closure)
                 (const ProtobufMsgs__ServiceOrder *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor protobuf_msgs__service_identifier__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__service_endpoint__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__service__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__service_information_request__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__service_status__descriptor;
extern const ProtobufCEnumDescriptor    protobuf_msgs__service_status__status__descriptor;
extern const ProtobufCMessageDescriptor protobuf_msgs__service_order__descriptor;
extern const ProtobufCEnumDescriptor    protobuf_msgs__service_order__order_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_systemmanager_2fservicediscovery_2eproto__INCLUDED */
